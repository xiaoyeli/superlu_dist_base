/*! \file
Copyright (c) 2003, The Regents of the University of California, through
Lawrence Berkeley National Laboratory (subject to receipt of any required
approvals from U.S. Dept. of Energy)

All rights reserved.

The source code is distributed under BSD license, see the file License.txt
at the top-level directory.
*/
@extract -b Typedef.inc
/*! @file
 * \brief  Distributed SuperLU data types and function prototypes
 *
 * <pre>
 * -- Distributed SuperLU routine (version 9.0) --
 * Lawrence Berkeley National Lab, Univ. of California Berkeley,
 * Georgia Institute of Technology
 * November 1, 2007
 * April 5, 2015
 * September 18, 2018  version 6.0
 * February 8, 2019  version 6.1.1
 * May 10, 2019 version 7.0.0
 * </pre>
 */

#ifndef __SUPERLU_@(PRE)DEFS /* allow multiple inclusions */
#define __SUPERLU_@(PRE)DEFS

/*
 * File name:	superlu_@(pre)defs.h
 * Purpose:     Distributed SuperLU data types and function prototypes
 * History:
 */

#include "superlu_defs.h"
@precision SCOMPLEX DCOMPLEX
#include "@(mod_pre)complex.h"
@precision !

/*
 *-- The structure used to store matrix A of the linear system and
 *   several vectors describing the transformations done to matrix A.
 *
 * A      (SuperMatrix*)
 *        Matrix A in A*X=B, of dimension (A->nrow, A->ncol).
 *        The number of linear equations is A->nrow. The type of A can be:
 *        Stype = SLU_NC; Dtype = SLU_D; Mtype = SLU_GE.
 *
 * DiagScale  (DiagScale_t)
 *        Specifies the form of equilibration that was done.
 *        = NOEQUIL: No equilibration.
 *        = ROW:  Row equilibration, i.e., A was premultiplied by diag(R).
 *        = COL:  Column equilibration, i.e., A was postmultiplied by diag(C).
 *        = BOTH: Both row and column equilibration, i.e., A was replaced
 *                 by diag(R)*A*diag(C).
 *
 * R      @(mod_type)*, dimension (A->nrow)
 *        The row scale factors for A.
 *        If DiagScale = ROW or BOTH, A is multiplied on the left by diag(R).
 *        If DiagScale = NOEQUIL or COL, R is not defined.
 *
 * C      @(mod_type)*, dimension (A->ncol)
 *        The column scale factors for A.
 *        If DiagScale = COL or BOTH, A is multiplied on the right by diag(C).
 *        If DiagScale = NOEQUIL or ROW, C is not defined.
 *
 * perm_r (int*) dimension (A->nrow)
 *        Row permutation vector which defines the permutation matrix Pr,
 *        perm_r[i] = j means row i of A is in position j in Pr*A.
 *
 * perm_c (int*) dimension (A->ncol)
 *	  Column permutation vector, which defines the
 *        permutation matrix Pc; perm_c[i] = j means column i of A is
 *        in position j in A*Pc.
 *
 */
typedef struct {
    DiagScale_t DiagScale;
    @(mod_type) *R;
    @(mod_type) *C;
    int_t  *perm_r;
    int_t  *perm_c;
} @(pre)ScalePermstruct_t;

#if 0 // Sherry: move to superlu_defs.h
/*-- Auxiliary data type used in PxGSTRS/PxGSTRS1. */
typedef struct {
    int_t lbnum;  /* Row block number (local).      */
    int_t indpos; /* Starting position in Uindex[]. */
} Ucb_indptr_t;
#endif

/*
 * On each processor, the blocks in L are stored in compressed block
 * column format, the blocks in U are stored in compressed block row format.
 */
#define MAX_LOOKAHEADS 50
typedef struct {
    int_t   **Lrowind_bc_ptr; /* size ceil(NSUPERS/Pc);
    	                         free'd in @(pre)trs_compute_communication_structure routinies */
    int_t *Lrowind_bc_dat;  /* size sum of sizes of Lrowind_bc_ptr[lk]) */
    long int *Lrowind_bc_offset;  /* size ceil(NSUPERS/Pc)              */
    long int Lrowind_bc_cnt;

    @(type) **Lnzval_bc_ptr;  /* size ceil(NSUPERS/Pc);
    	                         free'd in @(pre)trs_compute_communication_structure routinies */
    @(type) *Lnzval_bc_dat;  /* size sum of sizes of Lnzval_bc_ptr[lk])  */
    long int *Lnzval_bc_offset;  /* size ceil(NSUPERS/Pc)                */
    long int Lnzval_bc_cnt;

    @(type) **Linv_bc_ptr;    /* size ceil(NSUPERS/Pc);
    	                         free'd in @(pre)trs_compute_communication_structure routinies */
    @(type) *Linv_bc_dat;  /* size sum of sizes of Linv_bc_ptr[lk])  */
    long int *Linv_bc_offset;  /* size ceil(NSUPERS/Pc)              */
    long int Linv_bc_cnt;

    int_t   **Lindval_loc_bc_ptr; /* size ceil(NSUPERS/Pc);
                                     pointers to locations in Lrowind_bc_ptr and Lnzval_bc_ptr;
    	                             free'd in @(pre)trs_compute_communication_structure routinies */

    int_t *Lindval_loc_bc_dat;  /* size: sum of sizes of Lindval_loc_bc_ptr[lk]) */
    long int *Lindval_loc_bc_offset;  /* size ceil(NSUPERS/Pc)  */
    long int Lindval_loc_bc_cnt;

    /* for new U format -> */
    int_t   **Ucolind_bc_ptr; /* size ceil(NSUPERS/Pc)                 */
    int_t *Ucolind_bc_dat;  /* size: sum of sizes of Ucolind_bc_ptr[lk])    */
    int64_t *Ucolind_bc_offset;  /* size ceil(NSUPERS/Pc)                 */
    int64_t Ucolind_bc_cnt;

    @(type) **Unzval_bc_ptr;  /* size ceil(NSUPERS/Pc)                 */
    @(type) *Unzval_bc_dat;  /* size: sum of sizes of Unzval_bc_ptr[lk])  */
    int64_t *Unzval_bc_offset;  /* size ceil(NSUPERS/Pc)                */
    int64_t Unzval_bc_cnt;

    int_t   **Uindval_loc_bc_ptr; /* size ceil(NSUPERS/Pc)  pointers to locations in Ucolind_bc_ptr and Unzval_bc_ptr */
    int_t *Uindval_loc_bc_dat; /* size: sum of sizes of Uindval_loc_bc_ptr[lk]) */
    int64_t *Uindval_loc_bc_offset;  /* size ceil(NSUPERS/Pc)   */
    int64_t Uindval_loc_bc_cnt;

    int_t   **Uind_br_ptr; /* size ceil(NSUPERS/Pr) pointers to locations in Ucolind_bc_ptr for each block row */
    int_t *Uind_br_dat;  /* size: sum of sizes of Uind_br_ptr[lk])    */
    int64_t *Uind_br_offset;  /* size ceil(NSUPERS/Pr)                 */
    int64_t Uind_br_cnt;

    int_t   **Ucolind_br_ptr; /* size ceil(NSUPERS/Pr)                 */
    int_t *Ucolind_br_dat;  /* size: sum of sizes of Ucolind_br_ptr[lk])    */
    int64_t *Ucolind_br_offset;  /* size ceil(NSUPERS/Pr)                 */
    int64_t Ucolind_br_cnt;

    @(type) **Unzval_br_new_ptr;  /* size ceil(NSUPERS/Pr)                 */
    @(type) *Unzval_br_new_dat;  /* size: sum of sizes of Unzval_br_ptr[lk])  */
    int64_t *Unzval_br_new_offset;  /* size ceil(NSUPERS/Pr)                */
    int64_t Unzval_br_new_cnt;

    /* end for new U format <- */

    int_t   *Unnz; /* number of nonzeros per block column in U*/
    int_t   **Lrowind_bc_2_lsum; /* size ceil(NSUPERS/Pc)  map indices of Lrowind_bc_ptr to indices of lsum  */
    @(type) **Uinv_bc_ptr;  /* size ceil(NSUPERS/Pc)     	*/
    @(type) *Uinv_bc_dat;  /* size sum of sizes of Linv_bc_ptr[lk])                 */
    long int *Uinv_bc_offset;  /* size ceil(NSUPERS/Pc)                 */
    long int Uinv_bc_cnt;

    int_t   **Ufstnz_br_ptr;  /* size ceil(NSUPERS/Pr)                 */
    int_t   *Ufstnz_br_dat;  /* size sum of sizes of Ufstnz_br_ptr[lk])                 */
    long int *Ufstnz_br_offset;  /* size ceil(NSUPERS/Pr)    */
    long int Ufstnz_br_cnt;

    @(type)  **Unzval_br_ptr;  /* size ceil(NSUPERS/Pr)                  */
    @(type)  *Unzval_br_dat;   /* size sum of sizes of Unzval_br_ptr[lk]) */
    long int *Unzval_br_offset;  /* size ceil(NSUPERS/Pr)    */
    long int Unzval_br_cnt;

        /*-- Data structures used for broadcast and reduction trees. --*/
    C_Tree  *LBtree_ptr;       /* size ceil(NSUPERS/Pc)                */
    C_Tree  *LRtree_ptr;       /* size ceil(NSUPERS/Pr)                */
    C_Tree  *UBtree_ptr;       /* size ceil(NSUPERS/Pc)                */
    C_Tree  *URtree_ptr;       /* size ceil(NSUPERS/Pr)			*/
#if 0
    int_t   *Lsub_buf;        /* Buffer for the remote subscripts of L */
    @(type)  *Lval_buf;        /* Buffer for the remote nonzeros of L   */
    int_t   *Usub_buf;        /* Buffer for the remote subscripts of U */
    @(type)  *Uval_buf;        /* Buffer for the remote nonzeros of U   */
#endif
    int_t   *Lsub_buf_2[MAX_LOOKAHEADS];   /* Buffers for the remote subscripts of L*/
    @(type)  *Lval_buf_2[MAX_LOOKAHEADS];   /* Buffers for the remote nonzeros of L  */
    int_t   *Usub_buf_2[MAX_LOOKAHEADS];   /* Buffer for the remote subscripts of U */
    @(type)  *Uval_buf_2[MAX_LOOKAHEADS];   /* Buffer for the remote nonzeros of U   */
    @(type)  *ujrow;           /* used in panel factorization.          */
    int_t   bufmax[NBUFFERS]; /* Maximum buffer size across all MPI ranks:
			       *  0 : maximum size of Lsub_buf[]
			       *  1 : maximum size of Lval_buf[]
			       *  2 : maximum size of Usub_buf[]
			       *  3 : maximum size of Uval_buf[]
			       *  4 : maximum size of tempv[LDA]
			       */

    /*-- Record communication schedule for factorization. --*/
    int   *ToRecv;          /* Recv from no one (0), left (1), and up (2).*/
    int   *ToSendD;         /* Whether need to send down block row.       */
    int   **ToSendR;        /* List of processes to send right block col. */

    /*-- Record communication schedule for forward/back solves. --*/
    /* 1/15/22 Sherry: changed int_t to int type */
    int   *fmod;            /* Modification count for L-solve            */
    int   **fsendx_plist;   /* Column process list to send down Xk       */
    int   *frecv;           /* Modifications to be recv'd in proc row    */
    int   nfrecvx;          /* Number of Xk I will receive in L-solve    */
    int   nfsendx;          /* Number of Xk I will send in L-solve       */
    int   *bmod;            /* Modification count for U-solve            */
    int   **bsendx_plist;   /* Column process list to send down Xk       */
    int   *brecv;           /* Modifications to be recv'd in proc row    */
    int   nbrecvx;          /* Number of Xk I will receive in U-solve    */
    int   nbsendx;          /* Number of Xk I will send in U-solve       */
    int   *mod_bit;         /* Flag contribution from each row blocks    */
    int   nleaf;
    int   nroot;
    /*-- Auxiliary arrays used for forward/back solves. --*/
    int_t   *ilsum;           /* Starting position of each supernode in lsum
				 (local)  */
    int_t   ldalsum;          /* LDA of lsum (local) */
    int_t   SolveMsgSent;     /* Number of actual messages sent in LU-solve */
    int_t   SolveMsgVol;      /* Volume of messages sent in the solve phase */
    int   *bcols_masked;      /* Local block column IDs in my 2D grid */

    /*********************/
    /* The following variables are used in the hybrid solver */

    /*-- Counts to be used in U^{-T} triangular solve. -- */
    int_t UT_SOLVE;
    int_t L_SOLVE;
    int_t FRECV;
    int_t ut_ldalsum;        /* LDA of lsum (local) */
    int_t *ut_ilsum;         /* ilsum in column-wise                        */
    int_t *utmod;            /* Modification count for Ut-solve.            */
    int_t **ut_sendx_plist;  /* Row process list to send down Xk            */
    int_t *utrecv;           /* Modifications to be recev'd in proc column. */
    int_t n_utsendx;         /* Number of Xk I will receive                 */
    int_t n_utrecvx;         /* Number of Xk I will send                    */
    int_t n_utrecvmod;
    int_t *ut_modbit;
    int_t *Urbs;
    Ucb_indptr_t **Ucb_indptr;/* Vertical linked list pointing to Uindex[] */
    Ucb_indptr_t *Ucb_inddat;
    long int *Ucb_indoffset;
    long int Ucb_indcnt;

    int_t  **Ucb_valptr;      /* Vertical linked list pointing to Unzval[] */
    int_t  *Ucb_valdat;
    long int *Ucb_valoffset;
    long int Ucb_valcnt;

    /* some additional counters for L solve */
    int_t n;
    int_t nfrecvmod;
    int_t inv; /* whether the diagonal block is inverted*/
    int nbcol_masked; /*number of local block columns in my 2D grid*/

#ifdef GPU_ACC
    /* The following variables are used in GPU trisolve */

    int_t *d_Lrowind_bc_dat;
    long int *d_Lrowind_bc_offset;
    @(type) *d_Lnzval_bc_dat;
    long int *d_Lnzval_bc_offset;
    int_t *d_Ucolind_bc_dat;
    int64_t *d_Ucolind_bc_offset;
    int_t *d_Uind_br_dat;
    int64_t *d_Uind_br_offset;
    @(type) *d_Unzval_bc_dat;
    long int *d_Unzval_bc_offset;
    int_t *d_Ucolind_br_dat;  /* size: sum of sizes of Ucolind_br_ptr[lk])    */
    int64_t *d_Ucolind_br_offset;  /* size ceil(NSUPERS/Pr)                 */
    @(type) *d_Unzval_br_new_dat;  /* size: sum of sizes of Unzval_br_ptr[lk])  */
    int64_t *d_Unzval_br_new_offset;  /* size ceil(NSUPERS/Pr)                */

    @(type) *d_Linv_bc_dat ;
    @(type) *d_Uinv_bc_dat ;
    long int *d_Linv_bc_offset ;
    long int *d_Uinv_bc_offset ;
    int_t *d_Lindval_loc_bc_dat ;
    int64_t *d_Lindval_loc_bc_offset ;
    int_t *d_Uindval_loc_bc_dat ;
    int64_t *d_Uindval_loc_bc_offset ;
    int   *d_bcols_masked;      /* Local block column IDs in my 2D grid */

    //    long int *d_Lindval_loc_bc_offset ;
    //    int_t *d_Urbs;
    //    int_t   *d_Ufstnz_br_dat;
    //    long int *d_Ufstnz_br_offset;
    //    @(type) *d_Unzval_br_dat;
    //    long int *d_Unzval_br_offset;
    //    int_t  *d_Ucb_valdat;
    //    long int *d_Ucb_valoffset;
    //    Ucb_indptr_t *d_Ucb_inddat;
    //    long int *d_Ucb_indoffset;

    int_t  *d_ilsum ;
    int_t *d_xsup ;
    C_Tree  *d_LBtree_ptr ;
    C_Tree  *d_LRtree_ptr ;
    C_Tree  *d_UBtree_ptr ;
    C_Tree  *d_URtree_ptr ;
    gridinfo_t *d_grid;
#endif

} @(pre)LocalLU_t;

typedef struct
{
    int_t * Lsub_buf ;
    @(type) * Lval_buf ;
    int_t * Usub_buf ;
    @(type) * Uval_buf ;
} @(pre)LUValSubBuf_t;

typedef struct
{
    int_t nsupers;
    gEtreeInfo_t gEtreeInfo;
    int_t* iperm_c_supno;
    int_t* myNodeCount;
    int_t* myTreeIdxs;
    int_t* myZeroTrIdxs;
    int_t** treePerm;
    sForest_t** sForests;
    int_t* supernode2treeMap;
    int* supernodeMask;
    @(pre)LUValSubBuf_t  *LUvsb;
    SupernodeToGridMap_t* superGridMap;
    int maxLvl; // YL: store this to avoid the use of grid3d

    /* Sherry added the following 3 for variable size batch. 2/17/23 */
    int mxLeafNode; /* number of leaf nodes. */
    int *diagDims;  /* dimensions of the diagonal blocks at any level of the tree */
    int *gemmCsizes; /* sizes of the C matrices at any level of the tree. */
} @(pre)trf3Dpartition_t;


typedef struct {
    int_t *etree;
    Glu_persist_t *Glu_persist;
    @(pre)LocalLU_t *Llu;
    @(pre)trf3Dpartition_t *trf3Dpart;
    char dt;
} @(pre)LUstruct_t;


/*-- Data structure for communication during matrix-vector multiplication. */
typedef struct {
    int_t *extern_start;
    int_t *ind_tosend;    /* X indeices to be sent to other processes */
    int_t *ind_torecv;    /* X indeices to be received from other processes */
    int_t *ptr_ind_tosend;/* Printers to ind_tosend[] (Size procs)
			     (also point to val_torecv) */
    int_t *ptr_ind_torecv;/* Printers to ind_torecv[] (Size procs)
			     (also point to val_tosend) */
    int   *SendCounts;    /* Numbers of X indices to be sent
			     (also numbers of X values to be received) */
    int   *RecvCounts;    /* Numbers of X indices to be received
			     (also numbers of X values to be sent) */
    void  *val_tosend;   /* X values to be sent to other processes */
    void  *val_torecv;   /* X values to be received from other processes */
    int_t TotalIndSend;   /* Total number of indices to be sent
			     (also total number of values to be received) */
    int_t TotalValSend;   /* Total number of values to be sent.
			     (also total number of indices to be received) */
} p@(pre)gsmv_comm_t;

/*-- Data structure holding the information for the solution phase --*/
typedef struct {
    int_t *row_to_proc;
    int_t *inv_perm_c;
    int_t num_diag_procs, *diag_procs, *diag_len;
    p@(pre)gsmv_comm_t *gsmv_comm; /* communication metadata for SpMV,
         	       		      required by IterRefine.          */
    pxgstrs_comm_t *gstrs_comm;  /* communication metadata for SpTRSV. */
    int_t *A_colind_gsmv; /* After p@(pre)gsmv_init(), the global column
                             indices of A are translated into the relative
                             positions in the gathered x-vector.
                             This is re-used in repeated calls to p@(pre)gsmv() */
    int_t *xrow_to_proc; /* used by PDSLin */
    NRformat_loc3d* A3d; /* Point to 3D {A, B} gathered on 2D layer 0.
                            This needs to be peresistent between
			    3D factorization and solve.  */
    #ifdef GPU_ACC
    @(type) *d_lsum, *d_lsum_save;      /* used for device lsum*/
    @(type) *d_x;         /* used for device solution vector*/
    int  *d_fmod_save, *d_fmod;         /* used for device fmod vector*/
    int  *d_bmod_save, *d_bmod;         /* used for device bmod vector*/
    #endif
} @(pre)SOLVEstruct_t;



/*==== For 3D code ====*/

// new structures for pdgstrf_4_8

#if 0  // Sherry: moved to superlu_defs.h
typedef struct
{
    int_t nub;
    int_t klst;
    int_t ldu;
    int_t* usub;
    @(type)* uval;
} uPanelInfo_t;

typedef struct
{
    int_t *lsub;
    @(type) *lusup;
    int_t luptr0;
    int_t nlb;  //number of l blocks
    int_t nsupr;
} lPanelInfo_t;

/* HyP_t is the data structure to assist HALO offload of Schur-complement. */
typedef struct
{
    Remain_info_t *lookAhead_info, *Remain_info;
    Ublock_info_t *Ublock_info, *Ublock_info_Phi;

    int_t first_l_block_acc , first_u_block_acc;
    int_t last_offload ;
    int_t *Lblock_dirty_bit, * Ublock_dirty_bit;
    @(type) *lookAhead_L_buff, *Remain_L_buff;
    int_t lookAheadBlk;  /* number of blocks in look-ahead window */
    int_t RemainBlk ;    /* number of blocks outside look-ahead window */
    int_t  num_look_aheads, nsupers;
    int_t ldu, ldu_Phi;
    int_t num_u_blks, num_u_blks_Phi;

    int_t jj_cpu;
    @(type) *bigU_Phi;
    @(type) *bigU_host;
    int_t Lnbrow;
    int_t Rnbrow;

    int_t buffer_size;
    int_t bigu_size;
    int offloadCondition;
    int superlu_acc_offload;
    int nGPUStreams;
} HyP_t;

#endif  // Above are moved to superlu_defs.h


int_t scuStatUpdate(
    int_t knsupc,
    HyP_t* HyP,
    SCT_t* SCT,
    SuperLUStat_t *stat
    );



typedef struct
{
    @(type) *bigU;
    @(type) *bigV;
} @(pre)scuBufs_t;

typedef struct
{
    @(type)* BlockLFactor;
    @(type)* BlockUFactor;
} @(pre)diagFactBufs_t;


typedef struct @(pre)xT_struct
{
	@(type)* xT;
	int_t ldaspaT;
	int_t* ilsumT;
} @(pre)xT_struct;

typedef struct @(pre)lsumBmod_buff_t
{
    @(type) * tX;    // buffer for reordered X
    @(type) * tU;    // buffer for packedU
    int_t *indCols; //
}@(pre)lsumBmod_buff_t;

/*=====================*/

/***********************************************************************
 * Function prototypes
 ***********************************************************************/

#ifdef __cplusplus
extern "C" {
#endif


/* Supernodal LU factor related */
extern void
@(pre)Create_CompCol_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, @(type) *,
			    int_t *, int_t *, Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_CompRowLoc_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, int_t,
			       int_t, @(type) *, int_t *, int_t *,
			       Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)CompRow_to_CompCol_dist(int_t, int_t, int_t, @(type) *, int_t *, int_t *,
                         @(type) **, int_t **, int_t **);
extern int
p@(pre)CompRow_loc_to_CompCol_global(int_t, SuperMatrix *, gridinfo_t *,
	 		        SuperMatrix *);
extern void
@(pre)Copy_CompCol_Matrix_dist(SuperMatrix *, SuperMatrix *);
extern void
@(pre)Create_Dense_Matrix_dist(SuperMatrix *, int_t, int_t, @(type) *, int_t,
			  Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_SuperNode_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, @(type) *,
			      int_t *, int_t *, int_t *, int_t *, int_t *,
			      Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Copy_Dense_Matrix_dist(int_t, int_t, @(type) *, int_t,
                        @(type) *, int_t);

extern void    @(pre)allocateA_dist (int_t, int_t, @(type) **, int_t **, int_t **);
extern void    @(pre)GenXtrue_dist (int_t, int_t, @(type) *, int_t);
extern void    @(pre)FillRHS_dist (char *, int_t, @(type) *, int_t,
                              SuperMatrix *, @(type) *, int_t);
extern int     @(pre)create_matrix(SuperMatrix *, int, @(type) **, int *,
			      @(type) **, int *, FILE *, gridinfo_t *);
extern int     @(pre)create_matrix_rb(SuperMatrix *, int, @(type) **, int *,
			      @(type) **, int *, FILE *, gridinfo_t *);
extern int     @(pre)create_matrix_dat(SuperMatrix *, int, @(type) **, int *,
			      @(type) **, int *, FILE *, gridinfo_t *);
extern int @(pre)create_matrix_postfix(SuperMatrix *, int, @(type) **, int *,
				  @(type) **, int *, FILE *, char *, gridinfo_t *);

extern void   @(pre)ScalePermstructInit(const int_t, const int_t,
                                      @(pre)ScalePermstruct_t *);
extern void   @(pre)ScalePermstructFree(@(pre)ScalePermstruct_t *);

/* Driver related */
extern void    @(pre)gsequ_dist (SuperMatrix *, @(mod_type) *, @(mod_type) *, @(mod_type) *,
			    @(mod_type) *, @(mod_type) *, int_t *);
extern @(mod_type)  @(pre)langs_dist (char *, SuperMatrix *);
extern void    @(pre)laqgs_dist (SuperMatrix *, @(mod_type) *, @(mod_type) *, @(mod_type),
			    @(mod_type), @(mod_type), char *);
extern void    p@(pre)gsequ (SuperMatrix *, @(mod_type) *, @(mod_type) *, @(mod_type) *,
			@(mod_type) *, @(mod_type) *, int_t *, gridinfo_t *);
extern @(mod_type)  p@(pre)langs (char *, SuperMatrix *, gridinfo_t *);
extern void    p@(pre)laqgs (SuperMatrix *, @(mod_type) *, @(mod_type) *, @(mod_type),
			@(mod_type), @(mod_type), char *);
extern int     p@(pre)Permute_Dense_Matrix(int_t, int_t, int_t [], int_t[],
				      @(type) [], int, @(type) [], int, int,
				      gridinfo_t *);

extern int     sp_@(pre)trsv_dist (char *, char *, char *, SuperMatrix *,
			      SuperMatrix *, @(type) *, int *);
extern int     sp_@(pre)gemv_dist (char *, @(type), SuperMatrix *, @(type) *,
			      int, @(type), @(type) *, int);
extern int     sp_@(pre)gemm_dist (char *, int, @(type), SuperMatrix *,
                        @(type) *, int, @(type), @(type) *, int);

extern float @(pre)distribute(superlu_dist_options_t *,
                         int_t, SuperMatrix *, Glu_freeable_t *,
			 @(pre)LUstruct_t *, gridinfo_t *);
extern void  p@(pre)gssvx_ABglobal(superlu_dist_options_t *, SuperMatrix *,
			      @(pre)ScalePermstruct_t *, @(type) *,
			      int, int, gridinfo_t *, @(pre)LUstruct_t *, @(mod_type) *,
			      SuperLUStat_t *, int *);
extern float p@(pre)distribute(superlu_dist_options_t *, int_t, SuperMatrix *,
			 @(pre)ScalePermstruct_t *, Glu_freeable_t *,
			 @(pre)LUstruct_t *, gridinfo_t *);
extern float p@(pre)distribute_allgrid(superlu_dist_options_t *options, int_t n, SuperMatrix *A,
	     @(pre)ScalePermstruct_t *ScalePermstruct,
	     Glu_freeable_t *Glu_freeable, @(pre)LUstruct_t *LUstruct,
	     gridinfo_t *grid, int* supernodeMask);

extern float p@(pre)distribute_allgrid_index_only(superlu_dist_options_t *options, int_t n, SuperMatrix *A,
	     @(pre)ScalePermstruct_t *ScalePermstruct,
	     Glu_freeable_t *Glu_freeable, @(pre)LUstruct_t *LUstruct,
	     gridinfo_t *grid, int* supernodeMask);
extern void  p@(pre)gssvx(superlu_dist_options_t *, SuperMatrix *,
		     @(pre)ScalePermstruct_t *, @(type) *,
		     int, int, gridinfo_t *, @(pre)LUstruct_t *,
		     @(pre)SOLVEstruct_t *, @(mod_type) *, SuperLUStat_t *, int *);
extern void  p@(pre)Compute_Diag_Inv(int_t, @(pre)LUstruct_t *,gridinfo_t *, SuperLUStat_t *, int *);
extern int  @(pre)SolveInit(superlu_dist_options_t *, SuperMatrix *, int_t [], int_t [],
		       int_t, @(pre)LUstruct_t *, gridinfo_t *, @(pre)SOLVEstruct_t *);
extern void @(pre)SolveFinalize(superlu_dist_options_t *, @(pre)SOLVEstruct_t *);
extern void @(pre)Destroy_A3d_gathered_on_2d(@(pre)SOLVEstruct_t *, gridinfo3d_t *);
extern int_t p@(pre)gstrs_init(int_t, int_t, int_t, int_t,
                          int_t [], int_t [], gridinfo_t *grid,
	                  Glu_persist_t *, @(pre)SOLVEstruct_t *);
extern int_t p@(pre)gstrs_init_device_lsum_x(superlu_dist_options_t *, int_t , int_t , int_t , gridinfo_t *,
	     @(pre)LUstruct_t *, @(pre)SOLVEstruct_t *, int*);
extern int_t pdgstrs_delete_device_lsum_x(@(pre)SOLVEstruct_t *);
extern void pxgstrs_finalize(pxgstrs_comm_t *);
extern int  @(pre)ldperm_dist(int, int, int_t, int_t [], int_t [],
		    @(type) [], int_t *, @(mod_type) [], @(mod_type) []);
extern int  @(pre)static_schedule(superlu_dist_options_t *, int, int,
		            @(pre)LUstruct_t *, gridinfo_t *, SuperLUStat_t *,
			    int_t *, int_t *, int *);
extern void @(pre)LUstructInit(const int_t, @(pre)LUstruct_t *);
extern void @(pre)LUstructFree(@(pre)LUstruct_t *);
extern void @(pre)Destroy_LU(int_t, gridinfo_t *, @(pre)LUstruct_t *);
extern void @(pre)Destroy_Tree(int_t, gridinfo_t *, @(pre)LUstruct_t *);
extern void @(pre)scatter_l (int ib, int ljb, int nsupc, int_t iukp, int_t* xsup,
			int klst, int nbrow, int_t lptr, int temp_nbrow,
			int_t* usub, int_t* lsub, @(type) *tempv,
			int* indirect_thread, int* indirect2,
			int_t ** Lrowind_bc_ptr, @(type) **Lnzval_bc_ptr,
			gridinfo_t * grid);
extern void @(pre)scatter_u (int ib, int jb, int nsupc, int_t iukp, int_t * xsup,
                        int klst, int nbrow, int_t lptr, int temp_nbrow,
                        int_t* lsub, int_t* usub, @(type)* tempv,
                        int_t ** Ufstnz_br_ptr, @(type) **Unzval_br_ptr,
                        gridinfo_t * grid);
extern int_t p@(pre)gstrf(superlu_dist_options_t *, int, int, @(mod_type) anorm,
		    @(pre)LUstruct_t*, gridinfo_t*, SuperLUStat_t*, int*);

/* #define GPU_PROF
#define IPM_PROF */

/* Solve related */
extern void p@(pre)gstrs_Bglobal(superlu_dist_options_t *,
                             int_t, @(pre)LUstruct_t *, gridinfo_t *,
			     @(type) *, int_t, int, SuperLUStat_t *, int *);
extern void p@(pre)gstrs(superlu_dist_options_t *, int_t,
                    @(pre)LUstruct_t *, @(pre)ScalePermstruct_t *, gridinfo_t *,
		    @(type) *, int_t, int_t, int_t, int, @(pre)SOLVEstruct_t *,
		    SuperLUStat_t *, int *);
extern void p@(pre)gstrf2_trsm(superlu_dist_options_t * options, int_t k0, int_t k,
			  double thresh, Glu_persist_t *, gridinfo_t *,
			  @(pre)LocalLU_t *, MPI_Request *, int tag_ub,
			  SuperLUStat_t *, int *info);
extern void p@(pre)gstrs2_omp(int_t k0, int_t k, Glu_persist_t *, gridinfo_t *,
			 @(pre)LocalLU_t *, Ublock_info_t *, SuperLUStat_t *);
extern int_t p@(pre)ReDistribute_B_to_X(@(type) *B, int_t m_loc, int nrhs, int_t ldb,
				   int_t fst_row, int_t *ilsum, @(type) *x,
				   @(pre)ScalePermstruct_t *, Glu_persist_t *,
				   gridinfo_t *, @(pre)SOLVEstruct_t *);
extern void @(pre)lsum_fmod(@(type) *, @(type) *, @(type) *, @(type) *,
		       int, int, int_t , int *fmod, int_t, int_t, int_t,
		       int_t *, gridinfo_t *, @(pre)LocalLU_t *,
		       MPI_Request [], SuperLUStat_t *);
extern void @(pre)lsum_bmod(@(type) *, @(type) *, @(type) *,
                       int, int_t, int *bmod, int_t *, Ucb_indptr_t **,
                       int_t **, int_t *, gridinfo_t *, @(pre)LocalLU_t *,
		       MPI_Request [], SuperLUStat_t *);

extern void @(pre)lsum_fmod_inv(@(type) *, @(type) *, @(type) *, @(type) *,
		       int, int_t , int *fmod,
		       int_t *, gridinfo_t *, @(pre)LocalLU_t *,
		       SuperLUStat_t **, int_t *, int_t *, int_t, int_t, int_t, int_t, int, int);
extern void @(pre)lsum_fmod_inv_master(@(type) *, @(type) *, @(type) *, @(type) *,
		       int, int, int_t , int *fmod, int_t,
		       int_t *, gridinfo_t *, @(pre)LocalLU_t *,
		       SuperLUStat_t **, int_t, int_t, int_t, int_t, int, int);
extern void @(pre)lsum_bmod_inv(@(type) *, @(type) *, @(type) *, @(type) *,
                       int, int_t, int *bmod, int_t *, Ucb_indptr_t **,
                       int_t **, int_t *, gridinfo_t *, @(pre)LocalLU_t *,
		       SuperLUStat_t **, int_t *, int_t *, int_t, int_t, int, int);
extern void @(pre)lsum_bmod_inv_master(@(type) *, @(type) *, @(type) *, @(type) *,
                       int, int_t, int *bmod, int_t *, Ucb_indptr_t **,
                       int_t **, int_t *, gridinfo_t *, @(pre)LocalLU_t *,
		       SuperLUStat_t **, int_t, int_t, int, int);

extern void @(pre)ComputeLevelsets(int , int_t , gridinfo_t *,
		  Glu_persist_t *, @(pre)LocalLU_t *, int_t *);

#ifdef GPU_ACC
extern void p@(pre)convertU(superlu_dist_options_t *, gridinfo_t *, @(pre)LUstruct_t *, SuperLUStat_t *, int);

extern void @(pre)lsum_fmod_inv_gpu_wrap(int_t, int_t, int_t, int_t, @(type) *, @(type) *, int, int, int_t , int *fmod, C_Tree  *, C_Tree  *, int_t *, int_t *, int64_t *, @(type) *, int64_t *, @(type) *, int64_t *, int_t *, int64_t *, int_t *, int *, gridinfo_t *,
int_t , uint64_t* ,uint64_t* ,@(type)* ,@(type)* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int* ,int);

extern void dlsum_bmod_inv_gpu_wrap(superlu_dist_options_t *, int_t, int_t, int_t, int_t, @(type) *, @(type) *,int,int, int_t , int *, C_Tree  *, C_Tree  *, int_t *, int_t *, int64_t *,int_t *, int64_t *, int_t *, int64_t *, double *, int64_t *, double *, int64_t *, @(type)  *, int64_t *, int_t *, int64_t *, int_t *,gridinfo_t *,
                                    int_t, uint64_t*, uint64_t*, @(type)*, @(type)*,
                                    int*, int*, int*, int*,
                                    int*, int*, int*, int*, int*,
                                    int*, int*, int*, int*, int*, int*,
                                    int*, int*, int*, int); //int*); //int*, @(type)*);

#endif

extern void p@(pre)gsrfs(superlu_dist_options_t *, int_t,
                    SuperMatrix *, @(mod_type), @(pre)LUstruct_t *,
		    @(pre)ScalePermstruct_t *, gridinfo_t *,
		    @(type) [], int_t, @(type) [], int_t, int,
		    @(pre)SOLVEstruct_t *, @(mod_type) *, SuperLUStat_t *, int *);

extern void p@(pre)gsrfs3d(superlu_dist_options_t *, int_t,
            SuperMatrix *, @(mod_type), @(pre)LUstruct_t *,
	        @(pre)ScalePermstruct_t *, gridinfo3d_t *,
	        @(pre)trf3Dpartition_t*  , @(type) *, int_t, @(type) *, int_t, int,
	        @(pre)SOLVEstruct_t *, @(mod_type) *, SuperLUStat_t *, int *);


extern void p@(pre)gsrfs_ABXglobal(superlu_dist_options_t *, int_t,
                  SuperMatrix *, @(mod_type), @(pre)LUstruct_t *,
		  gridinfo_t *, @(type) *, int_t, @(type) *, int_t,
		  int, @(mod_type) *, SuperLUStat_t *, int *);
extern int   p@(pre)gsmv_AXglobal_setup(SuperMatrix *, Glu_persist_t *,
				   gridinfo_t *, int_t *, int_t *[],
				   @(type) *[], int_t *[], int_t []);
extern int  p@(pre)gsmv_AXglobal(int_t, int_t [], @(type) [], int_t [],
	                       @(type) [], @(type) []);
extern int  p@(pre)gsmv_AXglobal_abs(int_t, int_t [], @(type) [], int_t [],
				 @(type) [], @(mod_type) []);
extern void p@(pre)gsmv_init(SuperMatrix *, int_t *, gridinfo_t *,
			p@(pre)gsmv_comm_t *);
extern void p@(pre)gsmv(int_t, SuperMatrix *, gridinfo_t *, p@(pre)gsmv_comm_t *,
		   @(type) x[], @(type) ax[]);
extern void p@(pre)gsmv_finalize(p@(pre)gsmv_comm_t *);

extern int_t @(pre)initLsumBmod_buff(int_t ns, int nrhs, @(pre)lsumBmod_buff_t* lbmod_buf);
extern int_t @(pre)leafForestBackSolve3d(superlu_dist_options_t *options, int_t treeId, int_t n,  @(pre)LUstruct_t * LUstruct,
                            @(pre)ScalePermstruct_t * ScalePermstruct,
                            @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                            @(type) * x, @(type) * lsum, @(type) * recvbuf,
                            MPI_Request * send_req,
                            int nrhs, @(pre)lsumBmod_buff_t* lbmod_buf,
                            @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);

extern int_t @(pre)nonLeafForestBackSolve3d( int_t treeId,  @(pre)LUstruct_t * LUstruct,
                                @(pre)ScalePermstruct_t * ScalePermstruct,
                                @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                                 @(type) * x, @(type) * lsum, @(pre)xT_struct *xT_s,@(type) * recvbuf,
                                MPI_Request * send_req,
                                int nrhs, @(pre)lsumBmod_buff_t* lbmod_buf,
                                @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);

extern int_t @(pre)lasum_bmod_Tree(int_t  pTree, int_t cTree, @(type) *lsum, @(type) *x,
                       @(pre)xT_struct *xT_s,
                       int    nrhs, @(pre)lsumBmod_buff_t* lbmod_buf,
                       @(pre)LUstruct_t * LUstruct,
                       @(pre)trf3Dpartition_t*  trf3Dpartition,
                       gridinfo3d_t* grid3d, SuperLUStat_t * stat);
extern int_t @(pre)lsumForestBsolve(int_t k, int_t treeId,
                       @(type) *lsum, @(type) *x,  @(pre)xT_struct *xT_s,int    nrhs, @(pre)lsumBmod_buff_t* lbmod_buf,
                       @(pre)LUstruct_t * LUstruct,
                       @(pre)trf3Dpartition_t*  trf3Dpartition,
                       gridinfo3d_t* grid3d, SuperLUStat_t * stat);

extern int_t  @(pre)bCastXk2Pck  (int_t k, @(pre)xT_struct *xT_s, int nrhs,
                     @(pre)LUstruct_t * LUstruct, gridinfo_t * grid, xtrsTimer_t *xtrsTimer);

extern int_t  @(pre)lsumReducePrK (int_t k, @(type)*x, @(type)* lsum, @(type)* recvbuf, int nrhs,
                      @(pre)LUstruct_t * LUstruct, gridinfo_t * grid, xtrsTimer_t *xtrsTimer);

extern int_t @(pre)nonLeafForestForwardSolve3d( int_t treeId,  @(pre)LUstruct_t * LUstruct,
                                   @(pre)ScalePermstruct_t * ScalePermstruct,
                                   @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                                   @(type) * x, @(type) * lsum,
                                   @(pre)xT_struct *xT_s,
                                   @(type) * recvbuf, @(type)* rtemp,
                                   MPI_Request * send_req,
                                   int nrhs,
                                   @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);
extern int_t @(pre)leafForestForwardSolve3d(superlu_dist_options_t *options, int_t treeId, int_t n,  @(pre)LUstruct_t * LUstruct,
                               @(pre)ScalePermstruct_t * ScalePermstruct,
                               @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                               @(type) * x, @(type) * lsum, @(type) * recvbuf, @(type)* rtemp,
                               MPI_Request * send_req,
                               int nrhs,
                               @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);


extern int_t @(pre)trs_compute_communication_structure(superlu_dist_options_t *options, int_t n, @(pre)LUstruct_t * LUstruct,
                           @(pre)ScalePermstruct_t * ScalePermstruct,
                           int* supernodeMask, gridinfo_t *grid, SuperLUStat_t * stat);
extern int_t @(pre)reduceSolvedX_newsolve(int_t treeId, int_t sender, int_t receiver, @(type)* x, int nrhs,
                      @(pre)trf3Dpartition_t*  trf3Dpartition, @(pre)LUstruct_t* LUstruct, gridinfo3d_t* grid3d, @(type)* recvbuf, xtrsTimer_t *xtrsTimer);

extern void @(pre)lsum_fmod_leaf (
  int_t treeId,
  @(pre)trf3Dpartition_t*  trf3Dpartition,
    @(type) *lsum,    /* Sum of local modifications.                        */
    @(type) *x,       /* X array (local)                                    */
    @(type) *xk,      /* X[k].                                              */
    @(type) *rtemp,   /* Result of full matrix-vector multiply.             */
    int   nrhs,      /* Number of right-hand sides.                        */
    int   knsupc,    /* Size of supernode k.                               */
    int_t k,         /* The k-th component of X.                           */
    int *fmod,     /* Modification count for L-solve.                    */
    int_t nlb,       /* Number of L blocks.                                */
    int_t lptr,      /* Starting position in lsub[*].                      */
    int_t luptr,     /* Starting position in lusup[*].                     */
    int_t *xsup,
    gridinfo_t *grid,
    @(pre)LocalLU_t *Llu,
    MPI_Request send_req[], /* input/output */
    SuperLUStat_t *stat, xtrsTimer_t *xtrsTimer);

extern void @(pre)lsum_fmod_leaf_newsolve (
    @(pre)trf3Dpartition_t*  trf3Dpartition,
    @(type) *lsum,    /* Sum of local modifications.                        */
    @(type) *x,       /* X array (local)                                    */
    @(type) *xk,      /* X[k].                                              */
    @(type) *rtemp,   /* Result of full matrix-vector multiply.             */
    int   nrhs,      /* Number of right-hand sides.                        */
    int   knsupc,    /* Size of supernode k.                               */
    int_t k,         /* The k-th component of X.                           */
    int *fmod,     /* Modification count for L-solve.                    */
    int_t nlb,       /* Number of L blocks.                                */
    int_t lptr,      /* Starting position in lsub[*].                      */
    int_t luptr,     /* Starting position in lusup[*].                     */
    int_t *xsup,
    gridinfo_t *grid,
    @(pre)LocalLU_t *Llu,
    MPI_Request send_req[], /* input/output */
    SuperLUStat_t *stat,xtrsTimer_t *xtrsTimer);


extern void @(pre)lsum_bmod_GG
(
    @(type) *lsum,        /* Sum of local modifications.                    */
    @(type) *x,           /* X array (local).                               */
    @(type) *xk,          /* X[k].                                          */
    int    nrhs,          /* Number of right-hand sides.                    */
    @(pre)lsumBmod_buff_t* lbmod_buf,
    int_t  k,            /* The k-th component of X.                       */
    int  *bmod,        /* Modification count for L-solve.                */
    int_t  *Urbs,        /* Number of row blocks in each block column of U.*/
    Ucb_indptr_t **Ucb_indptr,/* Vertical linked list pointing to Uindex[].*/
    int_t  **Ucb_valptr, /* Vertical linked list pointing to Unzval[].     */
    int_t  *xsup,
    gridinfo_t *grid,
    @(pre)LocalLU_t *Llu,
    MPI_Request send_req[], /* input/output */
    SuperLUStat_t *stat, xtrsTimer_t *xtrsTimer);

extern void dlsum_bmod_GG_newsolve (
    @(pre)trf3Dpartition_t*  trf3Dpartition,
    @(type) *lsum,        /* Sum of local modifications.                    */
    @(type) *x,           /* X array (local).                               */
    @(type) *xk,          /* X[k].                                          */
    int    nrhs,          /* Number of right-hand sides.                    */
    @(pre)lsumBmod_buff_t* lbmod_buf,
    int_t  k,            /* The k-th component of X.                       */
    int  *bmod,        /* Modification count for L-solve.                */
    int_t  *Urbs,        /* Number of row blocks in each block column of U.*/
    Ucb_indptr_t **Ucb_indptr,/* Vertical linked list pointing to Uindex[].*/
    int_t  **Ucb_valptr, /* Vertical linked list pointing to Unzval[].     */
    int_t  *xsup,
    gridinfo_t *grid,
    @(pre)LocalLU_t *Llu,
    MPI_Request send_req[], /* input/output */
    SuperLUStat_t *stat
    , xtrsTimer_t *xtrsTimer);

extern int_t
p@(pre)ReDistribute3d_B_to_X (@(type) *B, int_t m_loc, int nrhs, int_t ldb,
                       int_t fst_row, int_t * ilsum, @(type) *x,
                       @(pre)ScalePermstruct_t * ScalePermstruct,
                       Glu_persist_t * Glu_persist,
                       gridinfo3d_t * grid3d, @(pre)SOLVEstruct_t * SOLVEstruct);


extern int_t
p@(pre)ReDistribute3d_X_to_B (int_t n, @(type) *B, int_t m_loc, int_t ldb,
                       int_t fst_row, int nrhs, @(type) *x, int_t * ilsum,
                       @(pre)ScalePermstruct_t * ScalePermstruct,
                       Glu_persist_t * Glu_persist, gridinfo3d_t * grid3d,
                       @(pre)SOLVEstruct_t * SOLVEstruct);

extern void
p@(pre)gstrs3d (superlu_dist_options_t *, int_t n, @(pre)LUstruct_t * LUstruct,
           @(pre)ScalePermstruct_t * ScalePermstruct,
           @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d, @(type) *B,
           int_t m_loc, int_t fst_row, int_t ldb, int nrhs,
           @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, int *info);

extern void
p@(pre)gstrs3d_newsolve (superlu_dist_options_t *options, int_t n, @(pre)LUstruct_t * LUstruct,
           @(pre)ScalePermstruct_t * ScalePermstruct,
           @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d, @(type) *B,
           int_t m_loc, int_t fst_row, int_t ldb, int nrhs,
           @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, int *info);

extern int_t p@(pre)gsTrBackSolve3d(superlu_dist_options_t *options, int_t n, @(pre)LUstruct_t * LUstruct,
                        @(pre)ScalePermstruct_t * ScalePermstruct,
                        @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                        @(type) *x3d, @(type) *lsum3d,
                        @(pre)xT_struct *xT_s,
                        @(type) * recvbuf,
                        MPI_Request * send_req, int nrhs,
                        @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);

extern int_t p@(pre)gsTrForwardSolve3d(superlu_dist_options_t *options, int_t n, @(pre)LUstruct_t * LUstruct,
                           @(pre)ScalePermstruct_t * ScalePermstruct,
                           @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                           @(type) *x3d, @(type) *lsum3d,
                           @(pre)xT_struct *xT_s,
                           @(type) * recvbuf,
                           MPI_Request * send_req, int nrhs,
                           @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);

extern int_t p@(pre)gsTrForwardSolve3d_newsolve(superlu_dist_options_t *options, int_t n, @(pre)LUstruct_t * LUstruct,
                           @(pre)ScalePermstruct_t * ScalePermstruct,
                           @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                           @(type) *x3d, @(type) *lsum3d,
                           @(type) * recvbuf,
                           MPI_Request * send_req, int nrhs,
                           @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);

extern int_t p@(pre)gsTrBackSolve3d_newsolve(superlu_dist_options_t *options, int_t n, @(pre)LUstruct_t * LUstruct,
                        @(pre)trf3Dpartition_t*  trf3Dpartition, gridinfo3d_t *grid3d,
                        @(type) *x3d, @(type) *lsum3d,
                        @(type) * recvbuf,
                        MPI_Request * send_req, int nrhs,
                        @(pre)SOLVEstruct_t * SOLVEstruct, SuperLUStat_t * stat, xtrsTimer_t *xtrsTimer);

int_t @(pre)broadcastAncestor3d( @(pre)trf3Dpartition_t*  trf3Dpartition,
			   @(pre)LUstruct_t* LUstruct, gridinfo3d_t* grid3d, SCT_t* SCT );

extern int_t @(pre)localSolveXkYk( trtype_t trtype, int_t k, @(type)* x, int nrhs,
                      @(pre)LUstruct_t * LUstruct, gridinfo_t * grid,
                      SuperLUStat_t * stat);

extern int_t @(pre)iBcastXk2Pck(int_t k, @(type)* x, int nrhs,
                   int** sendList, MPI_Request *send_req,
                   @(pre)LUstruct_t * LUstruct, gridinfo_t * grid,xtrsTimer_t *xtrsTimer);

extern int_t @(pre)trs_B_init3d(int_t nsupers, @(type)* x, int nrhs, @(pre)LUstruct_t * LUstruct, gridinfo3d_t *grid3d);
extern int_t @(pre)trs_X_gather3d(@(type)* x, int nrhs, @(pre)trf3Dpartition_t*  trf3Dpartition,
                     @(pre)LUstruct_t* LUstruct,
                     gridinfo3d_t* grid3d, xtrsTimer_t *xtrsTimer);
extern int_t @(pre)fsolveReduceLsum3d(int_t treeId, int_t sender, int_t receiver, @(type)* lsum, @(type)* recvbuf, int nrhs,
                         @(pre)trf3Dpartition_t*  trf3Dpartition, @(pre)LUstruct_t* LUstruct,
                          gridinfo3d_t* grid3d,xtrsTimer_t *xtrsTimer);

extern int_t @(pre)bsolve_Xt_bcast(int_t ilvl, @(pre)xT_struct *xT_s, int nrhs, @(pre)trf3Dpartition_t*  trf3Dpartition,
                     @(pre)LUstruct_t * LUstruct,gridinfo3d_t* grid3d , xtrsTimer_t *xtrsTimer);

extern int_t @(pre)p2pSolvedX3d(int_t treeId, int_t sender, int_t receiver, @(type)* x, int nrhs,
                      @(pre)trf3Dpartition_t*  trf3Dpartition, @(pre)LUstruct_t* LUstruct, gridinfo3d_t* grid3d, xtrsTimer_t *xtrsTimer);

/* Memory-related */
extern @(type)  *@(type)Malloc_dist(int_t);
extern @(type)  *@(type)Calloc_dist(int_t);
@precision SCOMPLEX DCOMPLEX
extern @(mod_type)  *@(mod_type)Malloc_dist(int_t);
extern @(mod_type)  *@(mod_type)Calloc_dist(int_t);
@precision !
extern void  *@(pre)user_malloc_dist (int_t, int_t);
extern void  @(pre)user_free_dist (int_t, int_t);
extern int_t @(pre)QuerySpace_dist(int_t, @(pre)LUstruct_t *, gridinfo_t *,
			      SuperLUStat_t *, superlu_dist_mem_usage_t *);

/* Auxiliary routines */

extern void @(pre)Clone_CompRowLoc_Matrix_dist(SuperMatrix *, SuperMatrix *);
extern void @(pre)Copy_CompRowLoc_Matrix_dist(SuperMatrix *, SuperMatrix *);
extern void @(pre)Zero_CompRowLoc_Matrix_dist(SuperMatrix *);
extern void @(pre)ScaleAddId_CompRowLoc_Matrix_dist(SuperMatrix *, @(type));
extern void @(pre)ScaleAdd_CompRowLoc_Matrix_dist(SuperMatrix *, SuperMatrix *, @(type));
extern void @(pre)ZeroLblocks(int, int, gridinfo_t *, @(pre)LUstruct_t *);
extern void @(pre)ZeroUblocks(int iam, int n, gridinfo_t *, @(pre)LUstruct_t *);
extern void    @(pre)fill_dist (@(type) *, int_t, @(type));
extern void    @(pre)inf_norm_error_dist (int_t, int_t, @(type)*, int_t,
                                     @(type)*, int_t, gridinfo_t*);
extern void    p@(pre)inf_norm_error(int, int_t, int_t, @(type) [], int_t,
				@(type) [], int_t , MPI_Comm);
extern void  @(pre)readhb_dist (int, FILE *, int_t *, int_t *, int_t *,
			   @(type) **, int_t **, int_t **);
extern void  @(pre)readtriple_dist(FILE *, int_t *, int_t *, int_t *,
			 @(type) **, int_t **, int_t **);
extern void  @(pre)readtriple_noheader(FILE *, int_t *, int_t *, int_t *,
			 @(type) **, int_t **, int_t **);
extern void  @(pre)readrb_dist(int, FILE *, int_t *, int_t *, int_t *,
		     @(type) **, int_t **, int_t **);
extern void  @(pre)readMM_dist(FILE *, int_t *, int_t *, int_t *,
	                  @(type) **, int_t **, int_t **);
extern int  @(pre)read_binary(FILE *, int_t *, int_t *, int_t *,
	                  @(type) **, int_t **, int_t **);

/* Distribute the data for numerical factorization */
extern float @(pre)dist_psymbtonum(superlu_dist_options_t *, int_t, SuperMatrix *,
                                @(pre)ScalePermstruct_t *, Pslu_freeable_t *,
                                @(pre)LUstruct_t *, gridinfo_t *);
extern void p@(pre)GetDiagU(int_t, @(pre)LUstruct_t *, gridinfo_t *, @(type) *);

extern int  @(pre)_c2cpp_GetHWPM(SuperMatrix *, gridinfo_t *, @(pre)ScalePermstruct_t *);

/* Routines for debugging */
extern void  @(pre)PrintLblocks(int, int_t, gridinfo_t *, Glu_persist_t *,
		 	   @(pre)LocalLU_t *);
extern void  @(pre)PrintUblocks(int, int_t, gridinfo_t *, Glu_persist_t *,
			   @(pre)LocalLU_t *);
extern void  @(pre)Print_CompCol_Matrix_dist(SuperMatrix *);
extern void  @(pre)Print_Dense_Matrix_dist(SuperMatrix *);
extern int   @(pre)Print_CompRowLoc_Matrix_dist(SuperMatrix *);
extern int   file_@(pre)Print_CompRowLoc_Matrix_dist(FILE *fp, SuperMatrix *A);
@precision SINGLE DOUBLE
extern void  Print@(type)5(char *, int_t, @(type) *);
extern int   file_Print@(type)5(FILE *, char *, int_t, @(type) *);
@precision SCOMPLEX DCOMPLEX
extern void  PrintDoublecomplex(char *, int_t, doublecomplex *);
extern int   file_PrintDoublecomplex(FILE *fp, char *, int_t, doublecomplex *);
@precision !

extern void @(pre)GenCOOLblocks(int, int_t, gridinfo_t*,
		  Glu_persist_t*, @(pre)LocalLU_t *, int_t** , int_t** , @(type) ** , int_t* , int_t* );
extern void @(pre)GenCSCLblocks(int, int_t, gridinfo_t*,
		  Glu_persist_t*, @(pre)LocalLU_t *, @(type) **, int_t **, int_t **, int_t*, int_t*);
extern void @(pre)GenCSRLblocks(int, int_t, gridinfo_t*,
		  Glu_persist_t*, @(pre)LocalLU_t *, @(type) **, int_t **, int_t **, int_t*, int_t*);

/* multi-GPU */
#ifdef GPU_SOLVE
// extern void create_nv_buffer(int* , int*, int* , int* );
extern void nv_init_wrapper(MPI_Comm);
// extern void nv_init_wrapper(int* c, char *v[], int* omp_mpi_level);
extern void @(pre)prepare_multiGPU_buffers(int,int,int,int,int,int);
extern void @(pre)delete_multiGPU_buffers();
#endif

/* BLAS */

#ifdef USE_VENDOR_BLAS
extern void @(pre)gemm_(const char*, const char*, const int*, const int*, const int*,
                  const @(type)*, const @(type)*, const int*, const @(type)*,
                  const int*, const @(type)*, @(type)*, const int*, int, int);
extern void @(pre)trsv_(char*, char*, char*, int*, @(type)*, int*,
                  @(type)*, int*, int, int, int);
extern void @(pre)trsm_(const char*, const char*, const char*, const char*,
                  const int*, const int*, const @(type)*, const @(type)*, const int*,
		  @(type)*, const int*, int, int, int, int);
extern void @(pre)gemv_(const char *, const int *, const int *, const @(type) *,
                  const @(type) *a, const int *, const @(type) *, const int *,
		  const @(type) *, @(type) *, const int *, int);

#else
extern int @(pre)gemm_(const char*, const char*, const int*, const int*, const int*,
                   const @(type)*,  const @(type)*,  const int*,  const @(type)*,
                   const int*,  const @(type)*, @(type)*, const int*);
extern int @(pre)trsv_(char*, char*, char*, int*, @(type)*, int*,
                  @(type)*, int*);
extern int @(pre)trsm_(const char*, const char*, const char*, const char*,
                  const int*, const int*, const @(type)*, const @(type)*, const int*,
		  @(type)*, const int*);
extern void @(pre)gemv_(const char *, const int *, const int *, const @(type) *,
                  const @(type) *a, const int *, const @(type) *, const int *,
		  const @(type) *, @(type) *, const int *);
#endif

@precision SINGLE DOUBLE
extern void @(pre)ger_(const int*, const int*, const @(type)*,
                 const @(type)*, const int*, const @(type)*, const int*,
		 @(type)*, const int*);
@precision SCOMPLEX DCOMPLEX
extern void @(pre)geru_(const int*, const int*, const @(type)*,
                 const @(type)*, const int*, const @(type)*, const int*,
		 @(type)*, const int*);
@precision !

extern int @(pre)scal_(const int *n, const @(type) *alpha, @(type) *dx, const int *incx);
extern int @(pre)axpy_(const int *n, const @(type) *alpha, const @(type) *x,
	               const int *incx, @(type) *y, const int *incy);

/* SuperLU BLAS interface: @(pre)superlu_blas.c  */
extern int superlu_@(pre)gemm(const char *transa, const char *transb,
                  int m, int n, int k, @(type) alpha, @(type) *a,
                  int lda, @(type) *b, int ldb, @(type) beta, @(type) *c, int ldc);
extern int superlu_@(pre)trsm(const char *sideRL, const char *uplo,
                  const char *transa, const char *diag, const int m, const int n,
                  const @(type) alpha, const @(type) *a,
                  const int lda, @(type) *b, const int ldb);
extern int superlu_@(pre)ger(const int m, const int n, const @(type) alpha,
                 const @(type) *x, const int incx, const @(type) *y,
                 const int incy, @(type) *a, const int lda);
extern int superlu_@(pre)scal(const int n, const @(type) alpha, @(type) *x, const int incx);
extern int superlu_@(pre)axpy(const int n, const @(type) alpha,
    const @(type) *x, const int incx, @(type) *y, const int incy);
extern int superlu_@(pre)gemv(const char *trans, const int m,
                  const int n, const @(type) alpha, const @(type) *a,
                  const int lda, const @(type) *x, const int incx,
                  const @(type) beta, @(type) *y, const int incy);
extern int superlu_@(pre)trsv(char *uplo, char *trans, char *diag,
                  int n, @(type) *a, int lda, @(type) *x, int incx);

#ifdef SLU_HAVE_LAPACK
extern void @(pre)trtri_(char*, char*, int*, @(type)*, int*, int*);
#endif

/*==== For 3D code ====*/
extern int @(pre)create_matrix3d(SuperMatrix *A, int nrhs, @(type) **rhs,
                     int *ldb, @(type) **x, int *ldx,
                     FILE *fp, gridinfo3d_t *grid3d);
extern int @(pre)create_matrix_postfix3d(SuperMatrix *A, int nrhs, @(type) **rhs,
                           int *ldb, @(type) **x, int *ldx,
                           FILE *fp, char * postfix, gridinfo3d_t *grid3d);
extern int @(pre)create_block_diag_3d(SuperMatrix *A, int batchCount, int nrhs, @(type) **rhs,
				 int *ldb, @(type) **x, int *ldx,
				 FILE *fp, char * postfix, gridinfo3d_t *grid3d);

/* Matrix distributed in NRformat_loc in 3D process grid. It converts
   it to a NRformat_loc distributed in 2D grid in grid-0 */
extern void @(pre)GatherNRformat_loc3d(fact_t Fact, NRformat_loc *A, @(type) *B,
				   int ldb, int nrhs, gridinfo3d_t *grid3d,
				   NRformat_loc3d **);
extern void @(pre)GatherNRformat_loc3_allgrid(fact_t Fact, NRformat_loc *A, @(type) *B,
				   int ldb, int nrhs, gridinfo3d_t *grid3d,
				   NRformat_loc3d **);
extern int @(pre)Scatter_B3d(NRformat_loc3d *A3d, gridinfo3d_t *grid3d);

extern void p@(pre)gssvx3d (superlu_dist_options_t *, SuperMatrix *,
		       @(pre)ScalePermstruct_t *, @(type) B[], int ldb, int nrhs,
		       gridinfo3d_t *, @(pre)LUstruct_t *, @(pre)SOLVEstruct_t *,
		       @(mod_type) *berr, SuperLUStat_t *, int *info);
extern int_t p@(pre)gstrf3d(superlu_dist_options_t *, int m, int n, @(mod_type) anorm,
		       @(pre)trf3Dpartition_t*, SCT_t *, @(pre)LUstruct_t *,
		       gridinfo3d_t *, SuperLUStat_t *, int *);
extern void @(pre)Init_HyP(HyP_t* HyP, @(pre)LocalLU_t *Llu, int_t mcb, int_t mrb );
extern void Free_HyP(HyP_t* HyP);
extern int updateDirtyBit(int_t k0, HyP_t* HyP, gridinfo_t* grid);

    /* from scatter.h */
extern void
@(pre)block_gemm_scatter( int_t lb, int_t j, Ublock_info_t *Ublock_info,
                    Remain_info_t *Remain_info, @(type) *L_mat, int ldl,
                    @(type) *U_mat, int ldu,  @(type) *bigV,
                    // int_t jj0,
                    int_t knsupc,  int_t klst,
                    int_t *lsub, int_t *usub, int_t ldt,
                    int_t thread_id,
                    int *indirect, int *indirect2,
                    int_t **Lrowind_bc_ptr, @(type) **Lnzval_bc_ptr,
                    int_t **Ufstnz_br_ptr, @(type) **Unzval_br_ptr,
                    int_t *xsup, gridinfo_t *, SuperLUStat_t *
#ifdef SCATTER_PROFILE
                    , double *Host_TheadScatterMOP, double *Host_TheadScatterTimer
#endif
                  );

#ifdef _OPENMP
/*this version uses a lock to prevent multiple thread updating the same block*/
extern void
@(pre)block_gemm_scatter_lock( int_t lb, int_t j, omp_lock_t* lock,
                         Ublock_info_t *Ublock_info,  Remain_info_t *Remain_info,
                         @(type) *L_mat, int_t ldl, @(type) *U_mat, int_t ldu,
                         @(type) *bigV,
                         // int_t jj0,
                         int_t knsupc,  int_t klst,
                         int_t *lsub, int_t *usub, int_t ldt,
                         int_t thread_id,
                         int *indirect, int *indirect2,
                         int_t **Lrowind_bc_ptr, @(type) **Lnzval_bc_ptr,
                         int_t **Ufstnz_br_ptr, @(type) **Unzval_br_ptr,
                         int_t *xsup, gridinfo_t *
#ifdef SCATTER_PROFILE
                         , double *Host_TheadScatterMOP, double *Host_TheadScatterTimer
#endif
                       );
#endif

extern int_t
@(pre)block_gemm_scatterTopLeft( int_t lb,  int_t j, @(type)* bigV,
				 int_t knsupc,  int_t klst, int_t* lsub,
                                 int_t * usub, int_t ldt,
				 int* indirect, int* indirect2,
                                 HyP_t* HyP, @(pre)LUstruct_t *, gridinfo_t*,
                                 SCT_t*SCT, SuperLUStat_t *
                               );
extern int_t
@(pre)block_gemm_scatterTopRight( int_t lb,  int_t j, @(type)* bigV,
				  int_t knsupc,  int_t klst, int_t* lsub,
                                  int_t * usub, int_t ldt,
				  int* indirect, int* indirect2,
                                  HyP_t* HyP, @(pre)LUstruct_t *, gridinfo_t*,
                                  SCT_t*SCT, SuperLUStat_t * );
extern int_t
@(pre)block_gemm_scatterBottomLeft( int_t lb,  int_t j, @(type)* bigV,
				    int_t knsupc,  int_t klst, int_t* lsub,
                                    int_t * usub, int_t ldt,
				    int* indirect, int* indirect2,
                                    HyP_t* HyP, @(pre)LUstruct_t *, gridinfo_t*,
                                    SCT_t*SCT, SuperLUStat_t * );
extern int_t
@(pre)block_gemm_scatterBottomRight( int_t lb,  int_t j, @(type)* bigV,
				     int_t knsupc,  int_t klst, int_t* lsub,
                                     int_t * usub, int_t ldt,
				     int* indirect, int* indirect2,
                                     HyP_t* HyP, @(pre)LUstruct_t *, gridinfo_t*,
                                     SCT_t*SCT, SuperLUStat_t * );

    /* from gather.h */
extern void @(pre)gather_u(int_t num_u_blks,
              Ublock_info_t *Ublock_info, int_t * usub,
              @(type) *uval,  @(type) *bigU,  int_t ldu,
              int_t *xsup, int_t klst                /* for SuperSize */
             );

extern void @(pre)gather_l( int_t num_LBlk, int_t knsupc,
               Remain_info_t *L_info,
               @(type) * lval, int_t LD_lval,
               @(type) * L_buff );

extern void @(pre)Rgather_L(int_t k, int_t *lsub, @(type) *lusup, gEtreeInfo_t*,
		      Glu_persist_t *, gridinfo_t *, HyP_t *,
		      int_t *myIperm, int_t *iperm_c_supno );
extern void @(pre)Rgather_U(int_t k, int_t jj0, int_t *usub, @(type) *uval,
		      @(type) *bigU, gEtreeInfo_t*, Glu_persist_t *,
		      gridinfo_t *, HyP_t *, int_t *myIperm,
		      int_t *iperm_c_supno, int_t *perm_u);

    /* from pxdistribute3d.h */
extern void @(pre)bcastPermutedSparseA(SuperMatrix *A,
                          @(pre)ScalePermstruct_t *ScalePermstruct,
                          Glu_freeable_t *Glu_freeable,
                          @(pre)LUstruct_t *LUstruct, gridinfo3d_t *grid3d);

extern void @(pre)newTrfPartitionInit(int_t nsupers,  @(pre)LUstruct_t *LUstruct, gridinfo3d_t *grid3d);


    /* from xtrf3Dpartition.h */
extern @(pre)trf3Dpartition_t* @(pre)initTrf3Dpartition(int_t nsupers,
					     superlu_dist_options_t *options,
					     @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d);
extern @(pre)trf3Dpartition_t* @(pre)initTrf3Dpartition_allgrid(int_t nsupers,
					     superlu_dist_options_t *options,
					     @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d);
extern @(pre)trf3Dpartition_t* @(pre)initTrf3DpartitionLUstructgrid0(int_t nsupers,
					     superlu_dist_options_t *options,
					     @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d);
extern void @(pre)Destroy_trf3Dpartition(@(pre)trf3Dpartition_t *trf3Dpartition);

extern void @(pre)3D_printMemUse(@(pre)trf3Dpartition_t*  trf3Dpartition,
			    @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d);

//extern int* getLastDep(gridinfo_t *grid, SuperLUStat_t *stat,
//		       superlu_dist_options_t *options, @(pre)LocalLU_t *Llu,
//		       int_t* xsup, int_t num_look_aheads, int_t nsupers,
//		       int_t * iperm_c_supno);

extern void @(pre)init3DLUstructForest( int_t* myTreeIdxs, int_t* myZeroTrIdxs,
				  sForest_t**  sForests, @(pre)LUstruct_t* LUstruct,
				  gridinfo3d_t* grid3d);

extern int_t @(pre)gatherAllFactoredLUFr(int_t* myZeroTrIdxs, sForest_t* sForests,
				   @(pre)LUstruct_t* LUstruct, gridinfo3d_t* grid3d,
				   SCT_t* SCT );

    /* The following are from pdgstrf2.h */
extern int_t @(pre)LpanelUpdate(int_t off0, int_t nsupc, @(type)* ublk_ptr,
			  int_t ld_ujrow, @(type)* lusup, int_t nsupr, SCT_t*);
extern void @(pre)gstrf2(int_t k, @(type)* diagBlk, int_t LDA, @(type)* BlockUfactor, int_t LDU,
            double thresh, int_t* xsup, superlu_dist_options_t *options,
            SuperLUStat_t *stat, int *info);
extern void Local_@(PRE)gstrf2(superlu_dist_options_t *options, int_t k,
			  double thresh, @(type) *BlockUFactor, Glu_persist_t *,
			  gridinfo_t *, @(pre)LocalLU_t *,
                          SuperLUStat_t *, int *info, SCT_t*);
extern int_t @(pre)Trs2_GatherU(int_t iukp, int_t rukp, int_t klst,
			  int_t nsupc, int_t ldu, int_t *usub,
			  @(type)* uval, @(type) *tempv);
extern int_t @(pre)Trs2_ScatterU(int_t iukp, int_t rukp, int_t klst,
			   int_t nsupc, int_t ldu, int_t *usub,
			   @(type)* uval, @(type) *tempv);
extern int_t @(pre)Trs2_GatherTrsmScatter(int_t klst, int_t iukp, int_t rukp,
                             int_t *usub, @(type)* uval, @(type) *tempv,
                             int_t knsupc, int nsupr, @(type)* lusup,
                             Glu_persist_t *Glu_persist)  ;
extern void p@(pre)gstrs2
#ifdef _CRAY
(
    int_t m, int_t k0, int_t k, Glu_persist_t *Glu_persist, gridinfo_t *grid,
    @(pre)LocalLU_t *Llu, SuperLUStat_t *stat, _fcd ftcs1, _fcd ftcs2, _fcd ftcs3
);
#else
(
    int_t m, int_t k0, int_t k, Glu_persist_t *Glu_persist, gridinfo_t *grid,
    @(pre)LocalLU_t *Llu, SuperLUStat_t *stat
);
#endif

extern void p@(pre)gstrf2(superlu_dist_options_t *, int_t nsupers, int_t k0,
		     int_t k, double thresh, Glu_persist_t *, gridinfo_t *,
		     @(pre)LocalLU_t *, MPI_Request *, int, SuperLUStat_t *, int *);

    /* from p3dcomm.h */
extern int_t @(pre)AllocLlu_3d(int_t nsupers, @(pre)LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)p3dScatter(int_t n, @(pre)LUstruct_t * LUstruct, gridinfo3d_t* grid3d, int *supernodeMask);
extern int_t @(pre)scatter3dLPanels(int_t nsupers,
                       @(pre)LUstruct_t * LUstruct, gridinfo3d_t* grid3d, int *supernodeMask);
extern int_t @(pre)scatter3dUPanels(int_t nsupers,
                       @(pre)LUstruct_t * LUstruct, gridinfo3d_t* grid3d, int *supernodeMask);
extern int_t @(pre)collect3dLpanels(int_t layer, int_t nsupers, @(pre)LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)collect3dUpanels(int_t layer, int_t nsupers, @(pre)LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)p3dCollect(int_t layer, int_t n, @(pre)LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
/*zero out LU non zero entries*/
extern int_t @(pre)zeroSetLU(int_t nnodes, int_t* nodeList , @(pre)LUstruct_t *, gridinfo3d_t*);
extern int @(pre)AllocGlu_3d(int_t n, int_t nsupers, @(pre)LUstruct_t *);
extern int @(pre)DeAllocLlu_3d(int_t n, @(pre)LUstruct_t *, gridinfo3d_t*);
extern int @(pre)DeAllocGlu_3d(@(pre)LUstruct_t *);

/* Reduces L and U panels of nodes in the List nodeList (size=nnnodes)
receiver[L(nodelist)] =sender[L(nodelist)] +receiver[L(nodelist)]
receiver[U(nodelist)] =sender[U(nodelist)] +receiver[U(nodelist)]
*/
int_t @(pre)reduceAncestors3d(int_t sender, int_t receiver,
                        int_t nnodes, int_t* nodeList,
                        @(type)* Lval_buf, @(type)* Uval_buf,
                        @(pre)LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
/*reduces all nodelists required in a level*/
extern int @(pre)reduceAllAncestors3d(int_t ilvl, int_t* myNodeCount,
                           int_t** treePerm,
                           @(pre)LUValSubBuf_t* LUvsb,
                           @(pre)LUstruct_t* LUstruct,
                           gridinfo3d_t* grid3d,
                           SCT_t* SCT );
/*
	Copies factored L and U panels from sender grid to receiver grid
	receiver[L(nodelist)] <-- sender[L(nodelist)];
	receiver[U(nodelist)] <-- sender[U(nodelist)];
*/
int_t @(pre)gatherFactoredLU(int_t sender, int_t receiver,
                       int_t nnodes, int_t *nodeList, @(pre)LUValSubBuf_t*  LUvsb,
                       @(pre)LUstruct_t* LUstruct, gridinfo3d_t* grid3d,SCT_t* SCT );

/*Gathers all the L and U factors to grid 0 for solve stage
	By  repeatidly calling above function*/
int_t @(pre)gatherAllFactoredLU(@(pre)trf3Dpartition_t*  trf3Dpartition, @(pre)LUstruct_t* LUstruct,
			   gridinfo3d_t* grid3d, SCT_t* SCT );

/*Distributes data in each layer and initilizes ancestors
 as zero in required nodes*/
int_t @(pre)init3DLUstruct( int_t* myTreeIdxs, int_t* myZeroTrIdxs,
                      int_t* nodeCount, int_t** nodeList,
                      @(pre)LUstruct_t* LUstruct, gridinfo3d_t* grid3d);

int_t @(pre)zSendLPanel(int_t k, int_t receiver,
		   @(pre)LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
int_t @(pre)zRecvLPanel(int_t k, int_t sender, @(type) alpha,
                   @(type) beta, @(type)* Lval_buf,
		   @(pre)LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
int_t @(pre)zSendUPanel(int_t k, int_t receiver,
		   @(pre)LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
int_t @(pre)zRecvUPanel(int_t k, int_t sender, @(type) alpha,
                   @(type) beta, @(type)* Uval_buf,
		   @(pre)LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);

    /* from communication_aux.h */
extern int_t @(pre)IBcast_LPanel (int_t k, int_t k0, int_t* lsub, @(type)* lusup,
			     gridinfo_t *, int* msgcnt, MPI_Request *,
			     int **ToSendR, int_t *xsup, int );
extern int_t @(pre)Bcast_LPanel(int_t k, int_t k0, int_t* lsub, @(type)* lusup,
			   gridinfo_t *, int* msgcnt, int **ToSendR,
			   int_t *xsup , SCT_t*, int);
extern int_t @(pre)IBcast_UPanel(int_t k, int_t k0, int_t* usub, @(type)* uval,
			    gridinfo_t *, int* msgcnt, MPI_Request *,
			    int *ToSendD, int );
extern int_t @(pre)Bcast_UPanel(int_t k, int_t k0, int_t* usub, @(type)* uval,
			   gridinfo_t *, int* msgcnt, int *ToSendD, SCT_t*, int);
extern int_t @(pre)Irecv_LPanel (int_t k, int_t k0,  int_t* Lsub_buf,
			    @(type)* Lval_buf, gridinfo_t *,
			    MPI_Request *, @(pre)LocalLU_t *, int);
extern int_t @(pre)Irecv_UPanel(int_t k, int_t k0, int_t* Usub_buf, @(type)*,
			   @(pre)LocalLU_t *, gridinfo_t*, MPI_Request *, int);
extern int_t @(pre)Wait_URecv(MPI_Request *, int* msgcnt, SCT_t *);
extern int_t @(pre)Wait_LRecv(MPI_Request*, int* msgcnt, int* msgcntsU,
			 gridinfo_t *, SCT_t*);
extern int_t @(pre)ISend_UDiagBlock(int_t k0, @(type) *ublk_ptr, int_t size,
			       MPI_Request *, gridinfo_t *, int);
extern int_t @(pre)Recv_UDiagBlock(int_t k0, @(type) *ublk_ptr, int_t size,
			      int_t src, gridinfo_t *, SCT_t*, int);
extern int_t @(pre)PackLBlock(int_t k, @(type)* Dest, Glu_persist_t *,
			 gridinfo_t *, @(pre)LocalLU_t *);
extern int_t @(pre)ISend_LDiagBlock(int_t k0, @(type) *lblk_ptr, int_t size,
			       MPI_Request *, gridinfo_t *, int);
extern int_t @(pre)IRecv_UDiagBlock(int_t k0, @(type) *ublk_ptr, int_t size,
			       int_t src, MPI_Request *, gridinfo_t *,
			       SCT_t*, int);
extern int_t @(pre)IRecv_LDiagBlock(int_t k0, @(type) *L_blk_ptr, int_t size,
			       int_t src, MPI_Request *, gridinfo_t*, SCT_t*, int);
extern int_t @(pre)UDiagBlockRecvWait( int_t k,  int* IrecvPlcd_D, int* factored_L,
				  MPI_Request *, gridinfo_t *, @(pre)LUstruct_t *, SCT_t *);

#if (MPI_VERSION>2)
extern int_t @(pre)IBcast_UDiagBlock(int_t k, @(type) *ublk_ptr, int_t size,
				MPI_Request *, gridinfo_t *);
extern int_t @(pre)IBcast_LDiagBlock(int_t k, @(type) *lblk_ptr, int_t size,
			       MPI_Request *, gridinfo_t *);
#endif

    /* from trfCommWrapper.h */
extern int_t @(pre)DiagFactIBCast(int_t k,  int_t k0,
			     @(type) *BlockUFactor, @(type) *BlockLFactor,
			     int* IrecvPlcd_D, MPI_Request *, MPI_Request *,
			     MPI_Request *, MPI_Request *, gridinfo_t *,
			     superlu_dist_options_t *, double thresh,
			     @(pre)LUstruct_t *LUstruct, SuperLUStat_t *, int *info,
			     SCT_t *, int tag_ub);
extern int_t @(pre)UPanelTrSolve( int_t k, @(type)* BlockLFactor, @(type)* bigV,
			     int_t ldt, Ublock_info_t*, gridinfo_t *,
			     @(pre)LUstruct_t *, SuperLUStat_t *, SCT_t *);
extern int_t @(pre)LPanelUpdate(int_t k,  int* IrecvPlcd_D, int* factored_L,
			   MPI_Request *, @(type)* BlockUFactor, gridinfo_t *,
			   @(pre)LUstruct_t *, SCT_t *);
extern int_t @(pre)UPanelUpdate(int_t k, int* factored_U, MPI_Request *,
			   @(type)* BlockLFactor, @(type)* bigV,
			   int_t ldt, Ublock_info_t*, gridinfo_t *,
			   @(pre)LUstruct_t *, SuperLUStat_t *, SCT_t *);
extern int_t @(pre)IBcastRecvLPanel(int_t k, int_t k0, int* msgcnt,
			       MPI_Request *, MPI_Request *,
			       int_t* Lsub_buf, @(type)* Lval_buf,
			      int * factored, gridinfo_t *, @(pre)LUstruct_t *,
			      SCT_t *, int tag_ub);
extern int_t @(pre)IBcastRecvUPanel(int_t k, int_t k0, int* msgcnt, MPI_Request *,
			       MPI_Request *, int_t* Usub_buf, @(type)* Uval_buf,
			       gridinfo_t *, @(pre)LUstruct_t *, SCT_t *, int tag_ub);
extern int_t @(pre)WaitL(int_t k, int* msgcnt, int* msgcntU, MPI_Request *,
		    MPI_Request *, gridinfo_t *, @(pre)LUstruct_t *, SCT_t *);
extern int_t @(pre)WaitU(int_t k, int* msgcnt, MPI_Request *, MPI_Request *,
		   gridinfo_t *, @(pre)LUstruct_t *, SCT_t *);
extern int_t @(pre)LPanelTrSolve(int_t k, int* factored_L, @(type)* BlockUFactor,
			    gridinfo_t *, @(pre)LUstruct_t *);

    /* from trfAux.h */
extern int getNsupers(int, Glu_persist_t *);
extern int_t initPackLUInfo(int_t nsupers, packLUInfo_t* packLUInfo);
extern int   freePackLUInfo(packLUInfo_t* packLUInfo);
extern int_t @(pre)SchurComplementSetup(int_t k, int *msgcnt, Ublock_info_t*,
				   Remain_info_t*, uPanelInfo_t *,
				   lPanelInfo_t *, int_t*, int_t *, int_t *,
				   @(type) *bigU, int_t* Lsub_buf,
				   @(type)* Lval_buf, int_t* Usub_buf,
				   @(type)* Uval_buf, gridinfo_t *, @(pre)LUstruct_t *);
extern int_t @(pre)SchurComplementSetupGPU(int_t k, msgs_t* msgs, packLUInfo_t*,
				      int_t*, int_t*, int_t*, gEtreeInfo_t*,
				      factNodelists_t*, @(pre)scuBufs_t*,
				      @(pre)LUValSubBuf_t* LUvsb, gridinfo_t *,
				      @(pre)LUstruct_t *, HyP_t*);
extern @(type)* @(pre)getBigV(int_t, int_t);
extern @(type)* @(pre)getBigU(superlu_dist_options_t *,
                           int_t, gridinfo_t *, @(pre)LUstruct_t *);
// permutation from superLU default

    /* from treeFactorization.h */
extern int_t @(pre)LluBufInit(@(pre)LUValSubBuf_t*, @(pre)LUstruct_t *);
extern int_t @(pre)initScuBufs(superlu_dist_options_t *,
                          int_t ldt, int_t num_threads, int_t nsupers,
			  @(pre)scuBufs_t*, @(pre)LUstruct_t*, gridinfo_t *);
extern int @(pre)freeScuBufs(@(pre)scuBufs_t* scuBufs);

#if 0 // NOT CALLED
// the generic tree factoring code
extern int_t treeFactor(
    int_t nnnodes,          // number of nodes in the tree
    int_t *perm_c_supno,    // list of nodes in the order of factorization
    commRequests_t *comReqs,    // lists of communication requests
    @(pre)scuBufs_t *scuBufs,   // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t*msgs,
    @(pre)LUValSubBuf_t* LUvsb,
    @(pre)diagFactBufs_t *dFBuf,
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT,
    int *info
);
#endif

extern int_t @(pre)sparseTreeFactor(
    int_t nnodes,          // number of nodes in the tree
    int_t *perm_c_supno,    // list of nodes in the order of factorization
    treeTopoInfo_t* treeTopoInfo,
    commRequests_t *comReqs,    // lists of communication requests
    @(pre)scuBufs_t *scuBufs,   // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t*msgs,
    @(pre)LUValSubBuf_t* LUvsb,
    @(pre)diagFactBufs_t *dFBuf,
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT,
    int *info
);

extern int_t @(pre)denseTreeFactor(
    int_t nnnodes,          // number of nodes in the tree
    int_t *perm_c_supno,    // list of nodes in the order of factorization
    commRequests_t *comReqs,    // lists of communication requests
    @(pre)scuBufs_t *scuBufs,   // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t*msgs,
    @(pre)LUValSubBuf_t* LUvsb,
    @(pre)diagFactBufs_t *dFBuf,
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT, int tag_ub,
    int *info
);

extern int_t @(pre)sparseTreeFactor_ASYNC(
    sForest_t* sforest,
    commRequests_t **comReqss,    // lists of communication requests // size maxEtree level
    @(pre)scuBufs_t *scuBufs,     // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t**msgss,                  // size=num Look ahead
    @(pre)LUValSubBuf_t** LUvsbs,          // size=num Look ahead
    @(pre)diagFactBufs_t **dFBufs,         // size maxEtree level
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    gEtreeInfo_t*   gEtreeInfo,        // global etree info
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    HyP_t* HyP,
    @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT, int tag_ub,
    int *info
);
extern @(pre)LUValSubBuf_t** @(pre)LluBufInitArr(int_t numLA, @(pre)LUstruct_t *LUstruct);
extern int @(pre)LluBufFreeArr(int_t numLA, @(pre)LUValSubBuf_t **LUvsbs);
extern @(pre)diagFactBufs_t** @(pre)initDiagFactBufsArr(int_t mxLeafNode, int_t ldt, gridinfo_t* grid);
extern @(pre)diagFactBufs_t** @(pre)initDiagFactBufsArrMod(int_t mxLeafNode, int_t* ldts, gridinfo_t* grid);
extern int @(pre)freeDiagFactBufsArr(int_t mxLeafNode, @(pre)diagFactBufs_t** dFBufs);
extern int_t @(pre)initDiagFactBufs(int_t ldt, @(pre)diagFactBufs_t* dFBuf);
extern int_t checkRecvUDiag(int_t k, commRequests_t *comReqs,
			    gridinfo_t *grid, SCT_t *SCT);
extern int_t checkRecvLDiag(int_t k, commRequests_t *comReqs, gridinfo_t *, SCT_t *);


extern int_t p@(pre)flatten_LDATA(superlu_dist_options_t *options, int_t n, @(pre)LUstruct_t * LUstruct,
                           gridinfo_t *grid, SuperLUStat_t * stat);

extern int_t
@(pre)ReDistribute_A(SuperMatrix *A, @(pre)ScalePermstruct_t *ScalePermstruct,
                Glu_freeable_t *Glu_freeable, int_t *xsup, int_t *supno,
                gridinfo_t *grid, int_t *colptr[], int_t *rowind[],
                @(type) *a[]);
extern float
p@(pre)distribute3d_Yang(superlu_dist_options_t *options, int_t n, SuperMatrix *A,
	     @(pre)ScalePermstruct_t *ScalePermstruct,
	     Glu_freeable_t *Glu_freeable, @(pre)LUstruct_t *LUstruct,
	     gridinfo3d_t *grid3d);


#if 0 // NOT CALLED
/* from ancFactorization.h (not called) */
extern int_t ancestorFactor(
    int_t ilvl,             // level of factorization
    sForest_t* sforest,
    commRequests_t **comReqss,    // lists of communication requests // size maxEtree level
    @(pre)scuBufs_t *scuBufs,     // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t**msgss,                  // size=num Look ahead
    @(pre)LUValSubBuf_t** LUvsbs,          // size=num Look ahead
    @(pre)diagFactBufs_t **dFBufs,         // size maxEtree level
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    gEtreeInfo_t*   gEtreeInfo,        // global etree info
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    HyP_t* HyP,
    @(pre)LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT, int tag_ub, int *info
);
#endif

/*== end 3D prototypes ===================*/

extern double *@(pre)ready_x;
extern double *@(pre)ready_lsum;

#ifdef __cplusplus
  }
#endif

#endif /* __SUPERLU_dDEFS */

