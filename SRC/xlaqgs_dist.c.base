/*! \file
Copyright (c) 2003, The Regents of the University of California, through
Lawrence Berkeley National Laboratory (subject to receipt of any required 
approvals from U.S. Dept. of Energy) 

All rights reserved. 

The source code is distributed under BSD license, see the file License.txt
at the top-level directory.
*/
@extract -b Typedef.inc
/*! @file @(pre)laqgs_dist.c
 * \brief Equlibrates a general sprase matrix
 *
 * <pre>
 * -- SuperLU routine (version 2.0) --
 * Univ. of California Berkeley, Xerox Palo Alto Research Center,
 * and Lawrence Berkeley National Lab.
 * November 15, 1997
 * 
 * Modified from LAPACK routine @(PRE)LAQGE
 * </pre>
 */
/*
 * File name:	@(pre)laqgs_dist.c
 * History:     Modified from LAPACK routine @(PRE)LAQGE
 */
#include <math.h>
#include "superlu_@(pre)defs.h"

/*! \brief
 *
 * <pre>
 *   Purpose   
 *   =======   
 *
 *   @(PRE)LAQGS_DIST equilibrates a general sparse M by N matrix A using the row and   
 *   scaling factors in the vectors R and C.   
 *
 *   See supermatrix.h for the definition of 'SuperMatrix' structure.
 *
 *   Arguments   
 *   =========   
 *
 *   A       (input/output) SuperMatrix*
 *           On exit, the equilibrated matrix.  See EQUED for the form of 
 *           the equilibrated matrix. The type of A can be:
 *	    Stype = NC; Dtype = @(Dtype_PRE); Mtype = GE.
 *	    
 *   R       (input) @(mod_type)*, dimension (A->nrow)
 *           The row scale factors for A.
 *	    
 *   C       (input) @(mod_type)*, dimension (A->ncol)
 *           The column scale factors for A.
 *	    
 *   ROWCND  (input) @(mod_type)
 *           Ratio of the smallest R(i) to the largest R(i).
 *	    
 *   COLCND  (input) @(mod_type)
 *           Ratio of the smallest C(i) to the largest C(i).
 *	    
 *   AMAX    (input) @(mod_type)
 *           Absolute value of largest matrix entry.
 *	    
 *   EQUED   (output) char*
 *           Specifies the form of equilibration that was done.   
 *           = 'N':  No equilibration   
 *           = 'R':  Row equilibration, i.e., A has been premultiplied by  
 *                   diag(R).   
 *           = 'C':  Column equilibration, i.e., A has been postmultiplied  
 *                   by diag(C).   
 *           = 'B':  Both row and column equilibration, i.e., A has been
 *                   replaced by diag(R) * A * diag(C).   
 *
 *   Internal Parameters   
 *   ===================   
 *
 *   THRESH is a threshold value used to decide if row or column scaling   
 *   should be done based on the ratio of the row or column scaling   
 *   factors.  If ROWCND < THRESH, row scaling is done, and if   
 *   COLCND < THRESH, column scaling is done.   
 *
 *   LARGE and SMALL are threshold values used to decide if row scaling   
 *   should be done based on the absolute size of the largest matrix   
 *   element.  If AMAX > LARGE or AMAX < SMALL, row scaling is done.   
 *
 *   ===================================================================== 
 * </pre>
 */

void
@(pre)laqgs_dist(SuperMatrix *A, @(mod_type) *r, @(mod_type) *c, 
	@(mod_type) rowcnd, @(mod_type) colcnd, @(mod_type) amax, char *equed)
{

#define THRESH    (0.1)
    
    /* Local variables */
    NCformat *Astore;
    @(type)   *Aval;
    int_t i, j, irow;
    @(mod_type) large, small, cj;
@precision DCOMPLEX SCOMPLEX
    @(mod_type) temp;
@precision !

    /* Quick return if possible */
    if (A->nrow <= 0 || A->ncol <= 0) {
	*(unsigned char *)equed = 'N';
	return;
    }

    Astore = (NCformat *) A->Store;
    Aval = (@(type) *) Astore->nzval;
    
    /* Initialize LARGE and SMALL. */
    small = @(mod_pre)mach_dist("Safe minimum") / @(mod_pre)mach_dist("Precision");
    large = 1. / small;

    if (rowcnd >= THRESH && amax >= small && amax <= large) {
	if (colcnd >= THRESH)
	    *(unsigned char *)equed = 'N';
	else {
	    /* Column scaling */
	    for (j = 0; j < A->ncol; ++j) {
		cj = c[j];
		for (i = Astore->colptr[j]; i < Astore->colptr[j+1]; ++i) {
@precision DOUBLE SINGLE
		    Aval[i] *= cj;
@precision DCOMPLEX SCOMPLEX
		    @(pre)@(mod_pre)_mult(&Aval[i], &Aval[i], cj);
@precision !
                }
	    }
	    *(unsigned char *)equed = 'C';
	}
    } else if (colcnd >= THRESH) {
	/* Row scaling, no column scaling */
	for (j = 0; j < A->ncol; ++j)
	    for (i = Astore->colptr[j]; i < Astore->colptr[j+1]; ++i) {
		irow = Astore->rowind[i];
@precision DOUBLE SINGLE
		Aval[i] *= r[irow];
@precision DCOMPLEX SCOMPLEX
		@(pre)@(mod_pre)_mult(&Aval[i], &Aval[i], r[irow]);
@precision !
	    }
	*(unsigned char *)equed = 'R';
    } else {
	/* Row and column scaling */
	for (j = 0; j < A->ncol; ++j) {
	    cj = c[j];
	    for (i = Astore->colptr[j]; i < Astore->colptr[j+1]; ++i) {
		irow = Astore->rowind[i];
@precision DOUBLE SINGLE
		Aval[i] *= cj * r[irow];
@precision DCOMPLEX SCOMPLEX
		temp = cj * r[irow];
		@(pre)@(mod_pre)_mult(&Aval[i], &Aval[i], temp);
@precision !
	    }
	}
	*(unsigned char *)equed = 'B';
    }

    return;

} /* @(pre)laqgs_dist */

